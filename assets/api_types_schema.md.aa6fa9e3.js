import{_ as s,c as a,o as n,a as p}from"./app.0827ef81.js";const A=JSON.parse('{"title":"Schema type","description":"","frontmatter":{},"headers":[],"relativePath":"api/types/schema.md","lastUpdated":1673749473000}'),o={name:"api/types/schema.md"},l=p(`<h1 id="schema-type" tabindex="-1">Schema type <a class="header-anchor" href="#schema-type" aria-hidden="true">#</a></h1><p>Finished schema for further use in object parsing.</p><p>When you use functions for creating schema, you transfer the <a href="./raw-schema">RawSchema</a> to options and get the <strong>Schema</strong> type which building by the raw schema.</p><p>Usage example:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [Number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Boolean] </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> schema</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Schema</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">schema</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">a1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">b1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [Number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Boolean]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   a1: PropertySchema&lt;StringConstructor[]&gt;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   b1: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     a2: PropertySchema&lt;(NumberConstructor | BooleanConstructor)[]&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>If you use an array as <a href="./raw-schema">RawSchema</a>, you get default <strong>Schema</strong> type. Currently, the <strong>array type is not supported</strong>.</p></div>`,6),e=[l];function t(c,r,y,D,i,C){return n(),a("div",null,e)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
