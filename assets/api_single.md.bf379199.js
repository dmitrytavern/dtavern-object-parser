import{_ as s,c as a,o as n,a as l}from"./app.403485a4.js";const A=JSON.parse('{"title":".single()","description":"","frontmatter":{},"headers":[],"relativePath":"api/single.md","lastUpdated":1673657349000}'),e={name:"api/single.md"},o=l(`<h1 id="single" tabindex="-1">.single() <a class="header-anchor" href="#single" aria-hidden="true">#</a></h1><p>Parses the property from the object by the property schema.</p><p>The function uses overload and has 3-4 arguments.</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>For examples in this file, the property schema creator is not used. But in production, use only the <a href="./property">.property()</a> function to describe the property schema.</p></div><h2 id="single-object-key-schema" tabindex="-1">.single(object, key, schema) <a class="header-anchor" href="#single-object-key-schema" aria-hidden="true">#</a></h2><ul><li><code>object</code> - an original object, which uses to read and write a property value.</li><li><code>key</code> - a <a href="./types/property-key">PropertyKey</a> type.</li><li><code>schema</code> - a <a href="./types/property-schema">PropertySchema</a> or a <a href="./types/property-schema-raw">PropertySchemaRaw</a>.</li></ul><p>Usage:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> object </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">single</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// object =&gt; { a: &#39;Hello World&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">single</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// object =&gt; { a: &#39;Hello World&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">single</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// object =&gt; { a: &#39;Hello World&#39;, c: &#39;World&#39; }</span></span>
<span class="line"></span></code></pre></div><h2 id="single-readonly-writable-key-schema" tabindex="-1">.single(readonly, writable, key, schema) <a class="header-anchor" href="#single-readonly-writable-key-schema" aria-hidden="true">#</a></h2><ul><li><code>readonly</code> - an object to read a property value.</li><li><code>writable</code> - an object to write a property value.</li><li><code>key</code> - a <a href="./types/property-key">PropertyKey</a> type.</li><li><code>schema</code> - a <a href="./types/property-schema">PropertySchema</a> or a <a href="./types/property-schema-raw">PropertySchemaRaw</a>.</li></ul><p>Usage:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> readonly </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> writable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Help me</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">single</span><span style="color:#A6ACCD;">(readonly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> writable</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// readonly =&gt; { a: &#39;Hello World&#39; }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// writable =&gt; { a: &#39;Hello World&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">single</span><span style="color:#A6ACCD;">(readonly</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> writable</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// readonly =&gt; { a: &#39;Hello World&#39; }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// writable =&gt; { a: &#39;Hello World&#39;, c: &#39;World&#39; }</span></span>
<span class="line"></span></code></pre></div><h2 id="how-it-s-works" tabindex="-1">How it&#39;s works <a class="header-anchor" href="#how-it-s-works" aria-hidden="true">#</a></h2><p>Firstly, the function defines <strong>readonly</strong>, <strong>writable</strong> objects, <strong>key</strong>, and <strong>property schema</strong> from arguments. If something is wrong - throws. Next, calls functions in this order:</p><ol><li><p><strong>The existence checker</strong>. Returns an error when a property is required and not exists.</p></li><li><p><strong>The default setter</strong>. Sets a default value when a default setting exists and a property does not exist.</p></li><li><p><strong>Type checker</strong>. Compares value type with a property type setting when a property exists (or a value is a default). If no match is found - returns an error.</p></li><li><p><strong>Custom validator</strong>. Returns an error when a validator throws or returns false. If a validator is null - skip this function.</p></li></ol><div class="tip custom-block"><p class="custom-block-title">Note for type checker</p><p>See <a href="./../guide/advanced/types-upcasting">type upcasting</a> for more information on how this checker works.</p></div><h2 id="error-handling" tabindex="-1">Error handling <a class="header-anchor" href="#error-handling" aria-hidden="true">#</a></h2><p>If a property is invalid, the function returns an error object. See <a href="./types/property-error">PropertyError</a> type for more details.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">single</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   name: &#39;PropertyError&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   message: &#39;The property not exists in the object&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   exists: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   value: undefined,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   valueIsDefault: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   valueConstructors: [],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   schema: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     type: [ [Function: String] ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     element: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     required: true,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     default: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     validator: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     skipDefaultValidate: false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If a type in a schema is <strong>any</strong>, an array of <code>valueConstructors</code> will be empty.</p></div>`,20),p=[o];function t(r,c,y,i,D,F){return n(),a("div",null,p)}const d=s(e,[["render",t]]);export{A as __pageData,d as default};
