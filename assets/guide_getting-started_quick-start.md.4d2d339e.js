import{_ as s,c as a,o as n,a as l}from"./app.0827ef81.js";const A=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{},"headers":[],"relativePath":"guide/getting-started/quick-start.md","lastUpdated":1673751684000}'),o={name:"guide/getting-started/quick-start.md"},p=l(`<h1 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-hidden="true">#</a></h1><p>ObjectParser is designed to guarantee the structure of the target object according to a certain scheme. This means that the parser will return an object with the properties specified in the schema. which:</p><ul><li>Will be of the specified type.</li><li>Which will be checked for existence.</li><li>Which will be checked by a custom validator.</li><li>Which will have default values in case of absence.</li></ul><p>Here is a example:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> schema </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">schema</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Number]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">role</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">anonymous</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">validator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">anonymous</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Role must be &quot;anonymous&quot;, &quot;user&quot; or &quot;admin&quot;.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Dmitry</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> schema)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   value: { name: &#39;Dmitry&#39;, age: 19, role: &#39;anonymous&#39; }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   errors: []</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre></div><p><strong>What&#39;s going on here:</strong></p><ol><li>Created the object schema where: <ul><li><code>name</code> - is required property which can be only String.</li><li><code>age</code> - is required property which can be String or Number.</li><li><code>role</code> - is not required property, which can be only an &quot;anonymous&quot;, &quot;user&quot; or &quot;admin&quot; string. Value by default: &quot;anonymous&quot;.</li></ul></li><li>Parsed the target object by the object schema.</li></ol><p><strong>The result of parsing is an object, where:</strong></p><ul><li><code>value</code> - parsed object. By default <strong>is a reference on the original object</strong>.</li><li><code>errors</code> - an array of <a href="./../../api/types/general-error">GeneralError</a>.</li></ul><h2 id="error-handling" tabindex="-1">Error handling <a class="header-anchor" href="#error-handling" aria-hidden="true">#</a></h2><p>If errors occur during parsing, they will be in <code>errors</code>, and the property itself will <strong>not be changed</strong>.</p><p>Example:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> schema </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">schema</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Number]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">role</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">property</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">validator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">anonymous</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Role must be &quot;anonymous&quot;, &quot;user&quot; or &quot;admin&quot;.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">role</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> schema)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   value: { age: false, role: &#39;hello&#39; },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   errors: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       key: &#39;name&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       error: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         name: &#39;PropertyError&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         message: &#39;The property not exists in the object.&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         exists: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         value: undefined,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         valueIsDefault: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         valueConstructors: [],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         schema: (a reference to a property schema)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       key: &#39;age&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       error: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         name: &#39;PropertyError&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         message: &#39;The property has an invalid type.&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         exists: true,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         value: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         valueIsDefault: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         valueConstructors: [ [Function: Boolean], [Function: Object] ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         schema: (a reference to a property schema)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       key: &#39;role&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       error: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         name: &#39;PropertyError&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         message: &#39;Role must be &quot;anonymous&quot;, &quot;user&quot; or &quot;admin&quot;.&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         exists: true,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         value: &#39;hello&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         valueIsDefault: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         valueConstructors: [ [Function: String], [Function: Object] ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//         schema: (a reference to a property schema)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The example above <strong>shows only a part</strong> of the possible errors that can occur during parsing. For more information about parsing see <a href="./../../api/single">.single()</a> or about an error see <a href="./../../api/types/property-error">PropertyError</a>.</p></div>`,14),e=[p];function t(r,c,y,i,F,D){return n(),a("div",null,e)}const u=s(o,[["render",t]]);export{A as __pageData,u as default};
